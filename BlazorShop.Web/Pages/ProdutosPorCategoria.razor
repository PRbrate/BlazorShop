@page "/ProdutosPorCategoria/{CategoriaId:int}"

@if(produtoDtos == null & MensagemErro == null)
{
    <ExibirSpinner/>
}
else if (MensagemErro != null)
{
    <ExibirErro MensagemErro="@MensagemErro"/>
}
else
{
    <h3>Produtos (@NomeCategoria)</h3>
    
    @if(produtoDtos.Count() > 0)
    {
        <div class="row mt-3">
            <ExibirProdutos Produtos="@produtoDtos"></ExibirProdutos>
        </div>
    }
}

@code {
    [Parameter]
    public int CategoriaId { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    public IEnumerable<ProdutoDto>? produtoDtos { get; set; }

    public string? NomeCategoria { get; set; }

    public string? MensagemErro { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService? GerenciaProdutosLocalStorageService { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            //produtoDtos = await ProdutoService.GetItensPorCategoria(CategoriaId);
            produtoDtos = await GetCollectionPorCategoriaId(CategoriaId);

            if(produtoDtos != null && produtoDtos.Count() > 0)
            {
                var produtosDto = produtoDtos.FirstOrDefault(p => p.CategoriaId == CategoriaId);
                if(produtosDto != null)
                {
                    NomeCategoria = produtosDto.CategoriaNome;   
                }
            }
        }
        catch(Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    private async Task<IEnumerable<ProdutoDto>> GetCollectionPorCategoriaId(int categoriaId)
    {
        var produtoCollection = await GerenciaProdutosLocalStorageService.GetCollection();

        if(produtoCollection != null)
        {
            return produtoCollection.Where(p => p.CategoriaId == categoriaId);
        }
        else
        {
            return await ProdutoService.GetItensPorCategoria(categoriaId);
        }
    }
}
